generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String   // In production, this would be hashed
  rooms     Room[]
  roomMemberships RoomMember[]
  createdAt DateTime @default(now())
}

model Room {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  members Member[]
  bills   Bill[]
  invites RoomInvite[]
  roomMembers RoomMember[]
  categories Category[]
  tags    Tag[]
}

model Member {
  id      Int     @id @default(autoincrement())
  name    String
  roomId  Int
  room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  shares  Share[]
}

model Bill {
  id           Int      @id @default(autoincrement())
  title        String
  amountCents  Int
  period       String   // "YYYY-MM"
  rule         SplitRule @default(EQUAL)
  meta         Json?
  categoryId   Int?
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  roomId       Int
  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  shares       Share[]
  billTags     BillTag[]
  createdAt    DateTime @default(now())
}

enum SplitRule {
  EQUAL
  PERCENT
  WEIGHT
}

model Share {
  id          Int     @id @default(autoincrement())
  billId      Int
  bill        Bill    @relation(fields: [billId], references: [id], onDelete: Cascade)
  memberId    Int
  member      Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amountCents Int
  paid        Boolean @default(false)

  @@unique([billId, memberId])
}

model RoomInvite {
  id         String   @id @default(cuid())
  roomId     Int
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  inviteCode String   @unique
  expiresAt  DateTime
  maxUses    Int?
  usedCount  Int      @default(0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
}

model RoomMember {
  id      Int      @id @default(autoincrement())
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId  Int
  room    Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())
  
  @@unique([userId, roomId])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  color       String   @default("#3B82F6") // Hex color for UI
  icon        String?  // Icon name/emoji
  roomId      Int
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  bills       Bill[]
  createdAt   DateTime @default(now())
  
  @@unique([name, roomId]) // Unique category name per room
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  color     String   @default("#6B7280") // Hex color for UI
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  billTags  BillTag[]
  createdAt DateTime @default(now())
  
  @@unique([name, roomId]) // Unique tag name per room
}

model BillTag {
  id     Int  @id @default(autoincrement())
  billId Int
  bill   Bill @relation(fields: [billId], references: [id], onDelete: Cascade)
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([billId, tagId]) // A bill can have each tag only once
}
